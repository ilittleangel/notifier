group 'com.github.ilittleangel.notifier'
version "$version"

apply plugin: 'scala'
apply plugin: 'application'
apply plugin: 'com.palantir.docker'
apply from: 'gradle/distribution.gradle'
apply from: 'gradle/testing.gradle'

repositories {
    jcenter()
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    compileOnly "org.scala-lang:scala-compiler:$scalaMajor.$scalaMinor"
    compile "org.scala-lang:scala-library:$scalaMajor.$scalaMinor"

    compile "com.typesafe:config:$typesafeConfigVersion"
    compile "com.typesafe.akka:akka-http_$scalaMajor:$akkaHttpVersion"
    compile "com.typesafe.akka:akka-http-spray-json_$scalaMajor:$akkaHttpVersion"
    compile "com.lightbend.akka:akka-stream-alpakka-ftp_$scalaMajor:$alpakkaVersion"
    compile "com.github.scopt:scopt_$scalaMajor:$scoptVersion"

    // uncomment for debug logging in the sftp client
    //runtime "ch.qos.logback:logback-classic:1.2.3"

    testCompile "org.scalatest:scalatest_$scalaMajor:$scalatestVersion"
    testCompile "com.typesafe.akka:akka-http-testkit_$scalaMajor:$akkaHttpVersion"
    testCompile "com.stephenn:scalatest-circe_$scalaMajor:$scalatestCirceVersion"
    testCompile "com.github.stefanbirkner:fake-sftp-server-lambda:$fakeSftpServerVersion"
    testCompile "junit:junit:$junitVersion"
}

mainClassName = "${group}.App"

buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath "com.palantir.gradle.docker:gradle-docker:$palantirDockerVersion"
    }
}

task copyDockerfile(type: Copy) {
    from "$projectDir/Dockerfile"
    into "$buildDir/dockerfile"
    expand(version: project.version)
}

docker {
    name "angelrojo/notifier"
    dockerfile file("$copyDockerfile.outputs.files.asPath/Dockerfile")
    tags 'latest', "$project.version"
    files distZip.outputs
}

dockerPrepare.dependsOn copyDockerfile
docker.dependsOn assembleDist as Task
